}
cat("   Gráficos salvos em:", CONFIG$dir_graficos, "\n\n")
}
# === HEATMAP COMPARAÇÃO LDA vs BARDIN ===
if(exists("similaridades") && nrow(similaridades) > 0) {
p_comparacao <- similaridades %>%
ggplot(aes(x = categoria_bardin, y = factor(topico_lda), fill = similaridade)) +
geom_tile(color = "white") +
geom_text(aes(label = round(similaridade, 2)), color = "white", fontface = "bold") +
scale_fill_gradient(low = "#f8f9fa", high = "#2c3e50",
name = "Similaridade", labels = scales::percent) +
labs(
title = "Correspondência: Tópicos LDA ↔ Categorias Bardin",
subtitle = "Validação cruzada metodológica",
x = "Categorias de Bardin",
y = "Tópicos LDA"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
ggsave(file.path(CONFIG$dir_graficos, "comparacao_lda_bardin.png"),
p_comparacao, width = 10, height = 6, dpi = CONFIG$dpi, bg = "white")
}
# === GRÁFICOS COMPARATIVOS LDA vs TEORIA ===
if(CONFIG$gerar_graficos_comparativos && !is.null(validacao_cruzada)) {
cat("   6.7. GRÁFICOS COMPARATIVOS: LDA vs Teoria...\n")
# Heatmap de correspondência
p_correspondencia <- validacao_cruzada %>%
ggplot(aes(x = str_wrap(topico_teoria, 12), y = factor(topico_lda), fill = similaridade)) +
geom_tile(color = "white", size = 0.5) +
geom_text(aes(label = round(similaridade, 2)), color = "white", fontface = "bold", size = 3) +
scale_fill_gradient2(low = "#f8f9fa", mid = "#3498db", high = "#2c3e50",
midpoint = 0.5, name = "Similaridade\n(Jaccard)") +
labs(
title = "Correspondência: Tópicos LDA ↔ Categorias Teóricas (Bardin)",
subtitle = "Validação cruzada metodológica - valores mais altos = maior correspondência",
x = "Categorias Teóricas (Bardin)",
y = "Tópicos LDA (descobertos automaticamente)"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 10),
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
plot.subtitle = element_text(hjust = 0.5, size = 11),
panel.grid = element_blank()
)
ggsave(file.path(CONFIG$dir_graficos, "correspondencia_lda_teoria.png"),
p_correspondencia, width = 12, height = 8, dpi = CONFIG$dpi, bg = "white")
# Gráfico de barras - frequência dos tópicos teóricos
if(exists("freq_topicos_teoria")) {
p_freq_teoria <- freq_topicos_teoria %>%
mutate(topico_clean = str_wrap(str_replace_all(topico_teoria_principal, "_", " "), 20)) %>%
ggplot(aes(x = reorder(topico_clean, n), y = n)) +
geom_col(fill = "#e74c3c", alpha = 0.8) +
geom_text(aes(label = paste0(n, "\n(", prop, "%)")), hjust = -0.1, size = 3.5, fontface = "bold") +
coord_flip() +
labs(
title = "Frequência dos Tópicos Teóricos (Bardin)",
subtitle = paste("Aplicação manual das categorias em", sum(freq_topicos_teoria$n), "relatos"),
x = "Tópicos Teóricos",
y = "Número de Relatos",
caption = "Baseado nas categorias predefinidas de diferenciação familiar"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 1)
)
ggsave(file.path(CONFIG$dir_graficos, "frequencia_topicos_teoricos.png"),
p_freq_teoria, width = 12, height = 8, dpi = CONFIG$dpi, bg = "white")
}
# Gráfico de dispersão - similaridade vs frequência
if(exists("melhor_correspondencia")) {
dados_dispersao <- melhor_correspondencia %>%
left_join(freq_topicos_teoria, by = c("topico_teoria" = "topico_teoria_principal"))
p_dispersao <- dados_dispersao %>%
ggplot(aes(x = similaridade, y = n, size = palavras_comuns)) +
geom_point(color = "#3498db", alpha = 0.7) +
geom_text(aes(label = str_wrap(topico_teoria, 15)),
vjust = -0.5, hjust = 0.5, size = 3) +
scale_size_continuous(name = "Palavras\nComuns", range = c(3, 10)) +
labs(
title = "Relação: Correspondência vs Frequência dos Tópicos",
subtitle = "Tópicos mais frequentes têm maior correspondência com LDA?",
x = "Similaridade LDA ↔ Teoria (Jaccard)",
y = "Frequência nos Dados (nº relatos)",
caption = "Tamanho dos pontos = número de palavras em comum"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold"),
plot.subtitle = element_text(hjust = 0.5),
plot.caption = element_text(hjust = 1)
)
ggsave(file.path(CONFIG$dir_graficos, "dispersao_similaridade_frequencia.png"),
p_dispersao, width = 10, height = 8, dpi = CONFIG$dpi, bg = "white")
}
cat("       ✓ Gráficos comparativos gerados\n\n")
}
# ----------------------------------------------------------------
# 6.5. VISUALIZAÇÕES EXTRAS - WORDCLOUDS E ANÁLISES AVANÇADAS
# ----------------------------------------------------------------
if(CONFIG$gerar_graficos && nfeat(dfm_obj) > 0) {
cat("6.5. VISUALIZAÇÕES EXTRAS: Gerando wordclouds e análises...\n")
# === WORDCLOUD GERAL ===
if(require("wordcloud", quietly = TRUE)) {
# Preparar dados para wordcloud
freq_data <- freq_palavras %>%
filter(frequency >= 3, nchar(feature) >= 3) %>%
head(100)
if(nrow(freq_data) > 0) {
# Wordcloud tradicional
png(file.path(CONFIG$dir_graficos, "wordcloud_geral.png"),
width = 800, height = 600, bg = "white")
wordcloud(words = freq_data$feature,
freq = freq_data$frequency,
min.freq = 3,
max.words = 100,
random.order = FALSE,
rot.perc = 0.3,
colors = brewer.pal(8, "Dark2"),
scale = c(3, 0.5))
dev.off()
# Salvar dados para wordcloud interativo
write_csv(freq_data, file.path(CONFIG$dir_resultados, "dados_wordcloud_geral.csv"))
}
}
# === WORDCLOUDS POR CATEGORIA ===
for(categoria in names(SISTEMA_CATEGORIAS)) {
# Filtrar textos da categoria
textos_categoria <- dados_sentimentos %>%
filter(map_lgl(categorias, ~ categoria %in% .x)) %>%
pull(texto_limpo)
if(length(textos_categoria) >= 10) {  # Mínimo de textos para fazer wordcloud
# Criar corpus específico da categoria
corp_cat <- corpus(textos_categoria)
tokens_cat <- tokens(corp_cat, remove_punct = TRUE, remove_symbols = TRUE) %>%
tokens_tolower() %>%
tokens_remove(c(stopwords("pt"), "né", "aí", "pra", "pro")) %>%
tokens_keep(pattern = "^[a-záéíóúâêîôûãõç]{3,}$", valuetype = "regex")
dfm_cat <- dfm(tokens_cat) %>%
dfm_trim(min_docfreq = 2)
if(nfeat(dfm_cat) > 5) {
freq_cat <- textstat_frequency(dfm_cat, n = 50)
# Salvar dados da categoria
write_csv(freq_cat, file.path(CONFIG$dir_resultados, paste0("wordcloud_", categoria, ".csv")))
# Wordcloud da categoria
if(require("wordcloud", quietly = TRUE) && nrow(freq_cat) > 5) {
png(file.path(CONFIG$dir_graficos, paste0("wordcloud_", categoria, ".png")),
width = 600, height = 400, bg = "white")
wordcloud(words = freq_cat$feature,
freq = freq_cat$frequency,
min.freq = 1,
max.words = 30,
random.order = FALSE,
colors = brewer.pal(6, "Set2"),
scale = c(2, 0.5))
title(main = str_to_title(str_replace_all(categoria, "_", " ")),
col.main = "darkblue", cex.main = 1.2)
dev.off()
}
}
}
}
# === REDE DE CO-OCORRÊNCIA ===
if(require("igraph", quietly = TRUE) && require("ggraph", quietly = TRUE)) {
# Criar matriz de co-ocorrência
if(nfeat(dfm_obj) > 20) {
fcm_obj <- fcm(tokens_obj, context = "window", window = 5)
# Filtrar apenas palavras mais frequentes - LINHA CORRIGIDA
top_features <- freq_palavras$feature[1:min(30, nrow(freq_palavras))]
fcm_subset <- fcm_select(fcm_obj, pattern = top_features)
# Converter para grafo
if(sum(fcm_subset) > 0) {
graph_obj <- graph_from_adjacency_matrix(as.matrix(fcm_subset),
mode = "undirected",
weighted = TRUE)
# Remover vértices isolados
graph_obj <- delete.vertices(graph_obj, degree(graph_obj) == 0)
if(vcount(graph_obj) > 3) {
# Plot da rede
p_rede <- ggraph(graph_obj, layout = "fr") +
geom_edge_link(aes(width = weight), alpha = 0.6, color = "gray70") +
geom_node_point(aes(size = degree(graph_obj)), color = "steelblue", alpha = 0.8) +
geom_node_text(aes(label = name), size = 3, repel = TRUE) +
scale_edge_width(range = c(0.2, 2), guide = "none") +
scale_size(range = c(3, 8), guide = "none") +
labs(title = "Rede de Co-ocorrência de Palavras",
subtitle = "Palavras que aparecem frequentemente juntas") +
theme_void() +
theme(plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5))
ggsave(file.path(CONFIG$dir_graficos, "rede_coocorrencia.png"),
p_rede, width = 10, height = 8, dpi = CONFIG$dpi, bg = "white")
}
}
}
}
# === HEATMAP CATEGORIAS vs SENTIMENTOS ===
if(CONFIG$usar_sentimentos && !is.null(sentimento_por_categoria)) {
# Preparar dados para heatmap
heatmap_data <- sentimento_por_categoria %>%
select(categoria_principal, prop_negativo, prop_neutro, prop_positivo) %>%
pivot_longer(cols = starts_with("prop_"),
names_to = "sentimento",
values_to = "proporcao") %>%
mutate(
sentimento = str_remove(sentimento, "prop_"),
categoria_clean = str_wrap(str_replace_all(categoria_principal, "_", " "), 15)
)
# Heatmap
p_heatmap <- heatmap_data %>%
ggplot(aes(x = sentimento, y = categoria_clean, fill = proporcao)) +
geom_tile(color = "white", size = 0.1) +
geom_text(aes(label = paste0(round(proporcao), "%")),
color = "white", fontface = "bold", size = 3) +
scale_fill_gradient(low = "#f8f9fa", high = "#e74c3c",
name = "Proporção (%)", labels = function(x) paste0(x, "%")) +
labs(
title = "Heatmap: Sentimentos por Categoria",
subtitle = "Distribuição de polaridades por tipo de diferenciação",
x = "Polaridade do Sentimento",
y = "Categoria Temática"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 0.5),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
ggsave(file.path(CONFIG$dir_graficos, "heatmap_sentimentos_categorias.png"),
p_heatmap, width = 8, height = 6, dpi = CONFIG$dpi, bg = "white")
}
# === GRÁFICO DE BARRAS EMPILHADAS CATEGORIAS ===
p_barras <- freq_categorias %>%
filter(categoria_principal != "sem_categoria") %>%
mutate(
categoria_clean = str_to_title(str_replace_all(categoria_principal, "_", " ")),
categoria_clean = fct_reorder(categoria_clean, n)
) %>%
ggplot(aes(x = categoria_clean, y = n)) +
geom_col(aes(fill = categoria_clean), alpha = 0.8, show.legend = FALSE) +
geom_text(aes(label = paste0(n, "\n(", prop, "%)")),
hjust = -0.1, size = 3.5, fontface = "bold") +
coord_flip() +
scale_fill_viridis_d(option = "plasma") +
labs(
title = "Frequência das Categorias de Diferenciação Familiar",
subtitle = paste("Análise de", sum(freq_categorias$n), "relatos categorizados"),
x = "Categorias Temáticas",
y = "Número de Relatos",
caption = "Metodologia: Análise de Conteúdo de Bardin"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, hjust = 1),
panel.grid.minor = element_blank()
)
ggsave(file.path(CONFIG$dir_graficos, "categorias_barras_detalhado.png"),
p_barras, width = 12, height = 8, dpi = CONFIG$dpi, bg = "white")
# === BOXPLOT INTENSIDADE EMOCIONAL POR CATEGORIA ===
if(CONFIG$usar_sentimentos) {
# Preparar dados para boxplot
dados_boxplot <- dados_sentimentos %>%
filter(categoria_principal != "sem_categoria") %>%
mutate(categoria_clean = str_wrap(str_replace_all(categoria_principal, "_", " "), 15))
if(nrow(dados_boxplot) > 0) {
p_boxplot <- dados_boxplot %>%
ggplot(aes(x = categoria_clean, y = sent_intensidade, fill = categoria_clean)) +
geom_boxplot(alpha = 0.7, show.legend = FALSE) +
geom_jitter(width = 0.2, alpha = 0.3, size = 0.5) +
scale_fill_viridis_d(option = "mako") +
labs(
title = "Intensidade Emocional por Categoria",
subtitle = "Distribuição da intensidade dos sentimentos expressos",
x = "Categoria Temática",
y = "Intensidade Emocional",
caption = "Valores mais altos = maior intensidade emocional"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
ggsave(file.path(CONFIG$dir_graficos, "boxplot_intensidade_emocional.png"),
p_boxplot, width = 12, height = 8, dpi = CONFIG$dpi, bg = "white")
}
}
# === TABELA RESUMO PARA VISUALIZAÇÃO ===
if(CONFIG$usar_sentimentos) {
resumo_visual <- sentimento_por_categoria %>%
arrange(desc(n_relatos)) %>%
mutate(
categoria_clean = str_to_title(str_replace_all(categoria_principal, "_", " ")),
dominancia_negativa = prop_negativo > 50,
categoria_rank = row_number()
) %>%
select(categoria_rank, categoria_clean, n_relatos,
prop_negativo, prop_neutro, prop_positivo, media_score)
write_csv(resumo_visual, file.path(CONFIG$dir_resultados, "resumo_categorias_visual.csv"))
}
cat("   Visualizações extras geradas:\n")
cat("   - Wordcloud geral\n")
cat("   - Wordclouds por categoria\n")
if(file.exists(file.path(CONFIG$dir_graficos, "rede_coocorrencia.png"))) {
cat("   - Rede de co-ocorrência\n")
}
if(CONFIG$usar_sentimentos) {
cat("   - Heatmap sentimentos vs categorias\n")
cat("   - Boxplot intensidade emocional\n")
}
cat("   - Gráfico de barras detalhado\n")
cat("\n")
}
# ----------------------------------------------------------------
# 6.6. DASHBOARD INTERATIVO
# ----------------------------------------------------------------
if(CONFIG$gerar_graficos) {
cat("6.6. DASHBOARD: Gerando dashboard interativo...\n")
# Preparar dados para o dashboard
resumo_analise <- list(
total_documentos = nrow(dados_sentimentos),
taxa_aproveitamento = round(nrow(dados_sentimentos) / nrow(dados_brutos) * 100, 1),
categorias_ativas = nrow(freq_categorias) - 1,  # -1 para excluir "sem_categoria"
cobertura = round(mean(dados_sentimentos$categoria_principal != "sem_categoria") * 100, 1),
sentimentos_negativos = if(CONFIG$usar_sentimentos) round(mean(dados_sentimentos$sent_polaridade == "negativo") * 100, 1) else 0,
features_processadas = nfeat(dfm_obj),
topicos_lda = k_otimo
)
# HTML do dashboard
html_content <- paste0('
<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dashboard - Análise de Bardin</title>
<style>
* { margin: 0; padding: 0; box-sizing: border-box; }
body {
font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
min-height: 100vh; padding: 20px;
}
.dashboard {
max-width: 1200px; margin: 0 auto; background: white;
border-radius: 15px; box-shadow: 0 20px 40px rgba(0,0,0,0.1);
overflow: hidden;
}
.header {
background: linear-gradient(45deg, #2c3e50, #34495e);
color: white; padding: 30px; text-align: center;
}
.header h1 { font-size: 2.5em; margin-bottom: 10px; }
.header p { font-size: 1.2em; opacity: 0.9; }
.metrics {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
gap: 20px; padding: 30px; background: #f8f9fa;
}
.metric {
background: white; padding: 25px; border-radius: 10px;
text-align: center; box-shadow: 0 5px 15px rgba(0,0,0,0.08);
transition: transform 0.3s ease;
}
.metric:hover { transform: translateY(-5px); }
.metric-value { font-size: 2.5em; font-weight: bold; margin-bottom: 10px; }
.metric-label {
color: #666; font-size: 0.9em; text-transform: uppercase;
letter-spacing: 1px;
}
.success { color: #27ae60; }
.warning { color: #f39c12; }
.footer {
background: #2c3e50; color: white; padding: 20px; text-align: center;
}
</style>
</head>
<body>
<div class="dashboard">
<div class="header">
<h1>📊 Análise de Conteúdo de Bardin</h1>
<p>Diferenciação Familiar por Gênero em Comentários do Instagram</p>
</div>
<div class="metrics">
<div class="metric">
<div class="metric-value success">', resumo_analise$total_documentos, '</div>
<div class="metric-label">Documentos Analisados</div>
</div>
<div class="metric">
<div class="metric-value">', resumo_analise$taxa_aproveitamento, '%</div>
<div class="metric-label">Taxa de Aproveitamento</div>
</div>
<div class="metric">
<div class="metric-value success">', resumo_analise$categorias_ativas, '</div>
<div class="metric-label">Categorias Ativas</div>
</div>
<div class="metric">
<div class="metric-value">', resumo_analise$cobertura, '%</div>
<div class="metric-label">Cobertura Categorização</div>
</div>
<div class="metric">
<div class="metric-value warning">', resumo_analise$sentimentos_negativos, '%</div>
<div class="metric-label">Sentimentos Negativos</div>
</div>
<div class="metric">
<div class="metric-value">', resumo_analise$features_processadas, '</div>
<div class="metric-label">Features Processadas</div>
</div>
</div>
<div class="footer">
<div>Análise gerada em: ', format(Sys.time(), "%d/%m/%Y às %H:%M"), '</div>
</div>
</div>
</body>
</html>')
# Salvar dashboard
writeLines(html_content, file.path(CONFIG$dir_resultados, "dashboard_interativo.html"))
cat("   ✓ Dashboard interativo salvo: dashboard_interativo.html\n\n")
}
# ----------------------------------------------------------------
# 7. COMPILAR E SALVAR RESULTADOS
# ----------------------------------------------------------------
cat("7. RESULTADOS: Compilando e salvando...\n")
# Estatísticas finais
estatisticas <- list(
corpus = list(
total_original = nrow(dados_brutos),
total_analisado = nrow(dados_sentimentos),
taxa_aproveitamento = round(nrow(dados_sentimentos) / nrow(dados_brutos) * 100, 2),
media_palavras = round(mean(dados_sentimentos$n_palavras, na.rm = TRUE), 2)
),
categorizacao = list(
categorias_identificadas = nrow(freq_categorias),
categorias_ativas = sum(freq_categorias$n >= 5),
cobertura = round(mean(dados_sentimentos$categoria_principal != "sem_categoria") * 100, 2),
categoria_principal = freq_categorias$categoria_principal[1],
freq_principal = freq_categorias$n[1],
exclusao_mutua = round(metricas_qualidade$exclusao_mutua * 100, 2)
),
processamento = list(
features_dfm = nfeat(dfm_obj),
sparsity = round(sparsity(dfm_obj), 4),
k_topicos = k_otimo
)
)
if(CONFIG$usar_sentimentos && !is.null(dist_sentimentos)) {
neg_prop <- dist_sentimentos$prop[dist_sentimentos$sent_polaridade == "negativo"]
neu_prop <- dist_sentimentos$prop[dist_sentimentos$sent_polaridade == "neutro"]
pos_prop <- dist_sentimentos$prop[dist_sentimentos$sent_polaridade == "positivo"]
estatisticas$sentimentos <- list(
prop_negativo = if(length(neg_prop) > 0) neg_prop else 0,
prop_neutro = if(length(neu_prop) > 0) neu_prop else 0,
prop_positivo = if(length(pos_prop) > 0) pos_prop else 0,
score_medio = round(mean(dados_sentimentos$sent_score, na.rm = TRUE), 3)
)
}
# Resultados principais
resultados <- list(
config = CONFIG,
estatisticas = estatisticas,
dados_processados = dados_sentimentos,
freq_categorias = freq_categorias,
freq_palavras = freq_palavras,
sistema_categorias = SISTEMA_CATEGORIAS,
lexicon_sentimentos = LEXICON_PT,
dfm = dfm_obj,
lda_model = lda_model,
topics_terms = topics_terms,
metricas_qualidade = metricas_qualidade
)
if(CONFIG$usar_sentimentos) {
resultados$dist_sentimentos <- dist_sentimentos
resultados$sentimento_por_categoria <- sentimento_por_categoria
}
# Salvar arquivos
salvar_resultado(resultados, "analise_bardin_completa", "rds")
salvar_resultado(dados_sentimentos, "dados_categorizados", "csv")
salvar_resultado(freq_categorias, "frequencia_categorias", "csv")
salvar_resultado(estatisticas, "estatisticas_resumo", "json")
salvar_resultado(metricas_qualidade, "metricas_qualidade", "json")
if(CONFIG$usar_sentimentos && !is.null(sentimento_por_categoria)) {
salvar_resultado(sentimento_por_categoria, "sentimentos_por_categoria", "csv")
}
cat("\n=== ANÁLISE CONCLUÍDA ===\n")
cat("Documentos analisados:", estatisticas$corpus$total_analisado, "\n")
cat("Taxa de aproveitamento:", estatisticas$corpus$taxa_aproveitamento, "%\n")
cat("Categorias ativas:", estatisticas$categorizacao$categorias_ativas, "\n")
cat("Cobertura categorização:", estatisticas$categorizacao$cobertura, "%\n")
cat("Exclusão mútua:", estatisticas$categorizacao$exclusao_mutua, "%\n")
if(CONFIG$usar_sentimentos && !is.null(estatisticas$sentimentos)) {
cat("Sentimentos negativos:", estatisticas$sentimentos$prop_negativo, "%\n")
}
cat("Features processadas:", estatisticas$processamento$features_dfm, "\n")
cat("Tópicos LDA:", estatisticas$processamento$k_topicos, "\n")
return(resultados)
}
# ====================================================================
# EXECUTAR ANÁLISE
# ====================================================================
if(!interactive() || !exists("SKIP_AUTO_RUN")) {
resultados_finais <- executar_analise_bardin()
cat("\n✓ Para acessar os resultados: resultados_finais\n")
cat("✓ Para reexecutar: resultados_finais <- executar_analise_bardin()\n")
}
